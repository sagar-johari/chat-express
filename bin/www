#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('chatapp:server');
const http = require('http');
const { Server } = require('socket.io');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server
const server = http.createServer(app);

// Attach Socket.IO
const io = new Server(server, {
  cors: {
    origin: process.env.NODE_ENV === 'production' 
      ? [process.env.FRONTEND_URL, process.env.RAILWAY_PUBLIC_DOMAIN]
      : '*',
    credentials: true,
  }
});

let chatHistory = [];

// Track usernames by socket ID
const connectedUsers = {};

io.on('connection', (socket) => {
  console.log(`[+] Socket connected: ${socket.id}`);

  socket.emit('chat history', chatHistory);

  socket.on('chat message', (msg) => {
    chatHistory.push(msg);
    connectedUsers[socket.id] = msg.username;

    console.log(`[🗨️] ${msg.username}: ${msg.message}`);
    io.emit('chat message', msg);
  });

  socket.on('clear chat', () => {
    const user = connectedUsers[socket.id] || 'Unknown';
    chatHistory = [];
    console.log(`[🧹] ${user} cleared the chat`);
    io.emit('clear chat');
  });

  socket.on('disconnect', () => {
    const user = connectedUsers[socket.id] || 'Unknown';
    console.log(`[-] ${user} (socket ${socket.id}) disconnected`);
    delete connectedUsers[socket.id];
  });
});

server.listen(port, () => {
  const serverUrl = process.env.NODE_ENV === 'production' 
    ? `https://${process.env.RAILWAY_PUBLIC_DOMAIN}` 
    : `http://localhost:${port}`;
  console.log(`Server listening on ${serverUrl}`);
});
server.on('error', onError);
server.on('listening', onListening);

// helper functions
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
